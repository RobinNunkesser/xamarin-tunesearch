// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TuneSearch.Infrastructure;
//
//    var searchApiResults = SearchApiResults.FromJson(jsonString);

namespace TuneSearch.Infrastructure
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SearchApiResults
    {
        [JsonProperty("resultCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? ResultCount { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        public List<SearchApiResult> Results { get; set; }
    }

    public partial class SearchApiResult
    {
        [JsonProperty("wrapperType", NullValueHandling = NullValueHandling.Ignore)]
        public string WrapperType { get; set; }

        [JsonProperty("kind", NullValueHandling = NullValueHandling.Ignore)]
        public string Kind { get; set; }

        [JsonProperty("artistId", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArtistId { get; set; }

        [JsonProperty("collectionId", NullValueHandling = NullValueHandling.Ignore)]
        public long? CollectionId { get; set; }

        [JsonProperty("trackId", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrackId { get; set; }

        [JsonProperty("artistName", NullValueHandling = NullValueHandling.Ignore)]
        public string ArtistName { get; set; }

        [JsonProperty("collectionName", NullValueHandling = NullValueHandling.Ignore)]
        public string CollectionName { get; set; }

        [JsonProperty("trackName", NullValueHandling = NullValueHandling.Ignore)]
        public string TrackName { get; set; }

        [JsonProperty("collectionCensoredName", NullValueHandling = NullValueHandling.Ignore)]
        public string CollectionCensoredName { get; set; }

        [JsonProperty("trackCensoredName", NullValueHandling = NullValueHandling.Ignore)]
        public string TrackCensoredName { get; set; }

        [JsonProperty("artistViewUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ArtistViewUrl { get; set; }

        [JsonProperty("collectionViewUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri CollectionViewUrl { get; set; }

        [JsonProperty("trackViewUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri TrackViewUrl { get; set; }

        [JsonProperty("previewUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri PreviewUrl { get; set; }

        [JsonProperty("artworkUrl30", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ArtworkUrl30 { get; set; }

        [JsonProperty("artworkUrl60", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ArtworkUrl60 { get; set; }

        [JsonProperty("artworkUrl100", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ArtworkUrl100 { get; set; }

        [JsonProperty("collectionPrice", NullValueHandling = NullValueHandling.Ignore)]
        public double? CollectionPrice { get; set; }

        [JsonProperty("trackPrice", NullValueHandling = NullValueHandling.Ignore)]
        public double? TrackPrice { get; set; }

        [JsonProperty("releaseDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ReleaseDate { get; set; }

        [JsonProperty("collectionExplicitness", NullValueHandling = NullValueHandling.Ignore)]
        public string CollectionExplicitness { get; set; }

        [JsonProperty("trackExplicitness", NullValueHandling = NullValueHandling.Ignore)]
        public string TrackExplicitness { get; set; }

        [JsonProperty("discCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? DiscCount { get; set; }

        [JsonProperty("discNumber", NullValueHandling = NullValueHandling.Ignore)]
        public long? DiscNumber { get; set; }

        [JsonProperty("trackCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrackCount { get; set; }

        [JsonProperty("trackNumber", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrackNumber { get; set; }

        [JsonProperty("trackTimeMillis", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrackTimeMillis { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("currency", NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("primaryGenreName", NullValueHandling = NullValueHandling.Ignore)]
        public string PrimaryGenreName { get; set; }

        [JsonProperty("isStreamable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsStreamable { get; set; }
    }

    public partial class SearchApiResults
    {
        public static SearchApiResults FromJson(string json) => JsonConvert.DeserializeObject<SearchApiResults>(json, TuneSearch.Infrastructure.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SearchApiResults self) => JsonConvert.SerializeObject(self, TuneSearch.Infrastructure.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
